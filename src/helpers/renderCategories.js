// helpers/renderCategories.js

/**
 * –§–æ—Ä–º–∞—Ç "–∫—Ä–∞—Å–∏–≤–æ–π —à–∞–ø–∫–∏" –ø–æ –¥–∞–Ω–Ω—ã–º –∏–∑ /vin
 * –û–∂–∏–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É vehicle —É—Ä–æ–≤–Ω—è:
 * {
 *   brand: 'AUDI',
 *   name: 'Q7',
 *   catalog: 'AU1587',
 *   vehicleId: '0',
 *   ssd: '...'
 *   attributes: {
 *     date: { name: '–î–∞—Ç–∞ –≤—ã–ø—É—Å–∫–∞', value: '16.08.2017' },
 *     manufactured: { name: '–í—ã–ø—É—â–µ–Ω–æ', value: '2018' },
 *     prodrange: { name: '–ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞', value: '2016 - 2026' },
 *     market: { name: '–†—ã–Ω–æ–∫', value: '–ï–≤—Ä–æ–ø–∞' },
 *     engine: { name: '–î–≤–∏–≥–∞—Ç–µ–ª—å', value: 'CVMD' },
 *     engine_info: { name: '–î–≤–∏–≥–∞—Ç–µ–ª—å', value: '3000CC / 249hp / 183kW TDI CR' },
 *     engineno: { name: '–ù–æ–º–µ—Ä –¥–≤–∏–≥–∞—Ç–µ–ª—è', value: '16658' },
 *     transmission: { name: '–ö–ü–ü', value: 'SUQ(8A)' },
 *     framecolor: { name: '–¶–≤–µ—Ç –∫—É–∑–æ–≤–∞', value: '2T2T' },
 *     trimcolor: { name: '–¶–≤–µ—Ç —Å–∞–ª–æ–Ω–∞', value: 'FZ' }
 *   }
 * }
 */

export function renderVehicleHeader(vehicle = {}) {
  const { brand = '', name = '', catalog = '', vehicleId = '', ssd = '', attributes = {} } = vehicle || {};
  const A = (k) => attributes?.[k]?.value || '';
  const H = (s) => String(s || '').replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');

  const line = (label, value, emoji = '') => {
    if (!value) return '';
    return `${emoji ? emoji + ' ' : ''}<b>${H(label)}:</b> ${H(value)}\n`;
  };

  const title = [
    brand || name ? `üöó <b>${H(brand || '')} ${H(name || '')}</b>` : 'üöó <b>–ê–≤—Ç–æ–º–æ–±–∏–ª—å</b>',
    catalog ? ` ¬∑ <code>${H(catalog)}</code>` : '',
  ].join('');

  const info =
    line('–†—ã–Ω–æ–∫', A('market'), 'üåç') +
    line('–ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞', A('prodrange'), 'üìÖ') +
    line('–î–∞—Ç–∞ –≤—ã–ø—É—Å–∫–∞', A('date'), 'üìÜ') +
    line('–í—ã–ø—É—â–µ–Ω–æ', A('manufactured'), 'üè∑Ô∏è') +
    line('–î–≤–∏–≥–∞—Ç–µ–ª—å', [A('engine_info') || '', A('engine') ? `(${A('engine')})` : ''].filter(Boolean).join(' '), 'üõ†Ô∏è') +
    line('‚Ññ –¥–≤–∏–≥–∞—Ç–µ–ª—è', A('engineno'), 'üî¢') +
    line('–ö–ü–ü', A('transmission'), '‚öôÔ∏è') +
    line('–¶–≤–µ—Ç –∫—É–∑–æ–≤–∞', A('framecolor'), 'üé®') +
    line('–¶–≤–µ—Ç —Å–∞–ª–æ–Ω–∞', A('trimcolor'), 'üßµ');

  // –¢–µ—Ö–∫–æ–Ω—Ç–µ–∫—Å—Ç ‚Äî –ø–æ–ª–µ–∑–Ω–æ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ, –Ω–æ –Ω–µ –º–µ—à–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  const tech = [
    vehicleId ? `‚Ä¢ vehicleId: <code>${H(vehicleId)}</code>` : '',
    catalog ? `‚Ä¢ catalog: <code>${H(catalog)}</code>` : '',
    ssd ? `‚Ä¢ ssd: <code>${H(ssd.slice(0, 16))}‚Ä¶</code>` : '',
  ]
    .filter(Boolean)
    .join('\n');

  return [
    title,
    info ? '\n' + info.trim() : '',
    tech ? '\n<code>' + tech + '</code>' : '',
  ]
    .filter(Boolean)
    .join('\n')
    .trim();
}

/**
 * –†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ –∫–æ—Ä–Ω–µ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏).
 * –û–∂–∏–¥–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –æ—Ç–¥–∞—ë—à—å –∏–∑ /categories:
 * data: [{ root: [ { id, name, children? }, ... ] }]
 */
export function renderCategoriesList(categoriesRoot) {
  const root = Array.isArray(categoriesRoot?.[0]?.root) ? categoriesRoot[0].root : [];
  const buttons = [];

  for (const cat of root) {
    const text = truncate(cat?.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è', 48);
    const id = String(cat?.id ?? '');
    if (!id) continue;
    buttons.push([{ text, callback_data: `cat:${id}` }]);
  }

  // –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 2 –≤ —Ä—è–¥ (–µ—Å–ª–∏ —Ö–æ—á–µ—Ç—Å—è –ø–æ 3 ‚Äî –ø–æ–º–µ–Ω—è–π chunkSize)
  const chunkSize = 2;
  const rows = [];
  for (let i = 0; i < buttons.length; i += chunkSize) {
    const row = buttons.slice(i, i + chunkSize).map(([btn]) => btn);
    rows.push(row);
  }

  return {
    text: 'üóÇÔ∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:',
    parse_mode: 'HTML',
    disable_web_page_preview: true,
    reply_markup: { inline_keyboard: rows.length ? rows : [[{ text: '–û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'noop:refresh' }]] },
  };
}

/**
 * –†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ —É–∑–ª–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * –û–∂–∏–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤ units: [ { unitId, name, ... }, ... ]
 */
export function renderUnitsList(units = []) {
  const rows = [];
  const buttons = units.map((u) => {
    const text = truncate(u?.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è', 48);
    const id = String(u?.unitId ?? '');
    // –ï—Å–ª–∏ –Ω–µ—Ç unitId ‚Äî –¥–µ–ª–∞–µ–º noop –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–µ–ª —ç–ª–µ–º–µ–Ω—Ç
    const cb = id ? `unit:${id}` : 'noop:unit';
    return { text, callback_data: cb };
  });

  // –ø–æ 2 –≤ —Ä—è–¥
  const chunkSize = 2;
  for (let i = 0; i < buttons.length; i += chunkSize) {
    rows.push(buttons.slice(i, i + chunkSize));
  }

  return {
    text: 'üîß <b>–£–∑–ª—ã</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —É–∑–µ–ª –¥–ª—è –¥–µ—Ç–∞–ª–µ–π/—Å—Ö–µ–º:',
    parse_mode: 'HTML',
    disable_web_page_preview: true,
    reply_markup: { inline_keyboard: rows.length ? rows : [[{ text: '–ù–∞–∑–∞–¥', callback_data: 'noop:back' }]] },
  };
}

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
function truncate(s, n) {
  const t = String(s || '');
  return t.length > n ? t.slice(0, n - 1) + '‚Ä¶' : t;
}
