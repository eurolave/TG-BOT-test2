// src/helpers/renderCategories.js

export function renderVehicleHeader(vehicle) {
  const name = vehicle?.name || '–ê–≤—Ç–æ–º–æ–±–∏–ª—å';
  const brand = vehicle?.brand || '';
  const attrs = vehicle?.attributes || {};
  const date = attrs.date?.value || '';
  const engine = attrs.engine?.value || '';
  const engineInfo = attrs.engine_info?.value || '';
  const transmission = attrs.transmission?.value || '';

  return [
    `<b>${escapeHtml(name)} ‚Äî ${escapeHtml(brand)}</b>`,
    date ? `–î–∞—Ç–∞ –≤—ã–ø—É—Å–∫–∞: <b>${escapeHtml(date)}</b>` : null,
    engine || engineInfo
      ? `–î–≤–∏–≥–∞—Ç–µ–ª—å: <b>${escapeHtml(engine)}</b>${engineInfo ? ` (${escapeHtml(engineInfo)})` : ''}`
      : null,
    transmission ? `–ö–ü–ü: <b>${escapeHtml(transmission)}</b>` : null,
  ].filter(Boolean).join('\n');
}

export function renderCategoriesList(categoriesRoot) {
  const root = Array.isArray(categoriesRoot?.[0]?.root) ? categoriesRoot[0].root : [];
  const lines = ['\n<b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>'];
  const buttons = [];

  const icon = (name) => {
    const n = (name || '').toLowerCase();
    if (n.includes('–¥–≤–∏–≥–∞—Ç–µ–ª')) return 'üîß';
    if (n.includes('–∫–æ—Ä–æ–±–∫')) return 'üîÅ';
    if (n.includes('—Ç–æ—Ä–º–æ–∑') || n.includes('–∫–æ–ª—ë—Å') || n.includes('–∫–æ–ª–µ—Å')) return 'üõë';
    if (n.includes('—ç–ª–µ–∫—Ç—Ä–æ')) return 'üîå';
    if (n.includes('–æ—Å—å')) return 'üõû';
    if (n.includes('–∫—É–∑–æ–≤')) return 'üö™';
    if (n.includes('–ø–µ–¥–∞–ª') || n.includes('–ø–µ—Ä–µ–∫–ª—é—á')) return 'üéõÔ∏è';
    if (n.includes('–ø–∏—Ç–∞–Ω–∏') || n.includes('–æ—Ö–ª–∞–∂–¥–µ–Ω') || n.includes('–≤—ã–ø—É—Å–∫')) return '‚öôÔ∏è';
    return 'üì¶';
  };

  root.forEach((cat, idx) => {
    const title = `${idx + 1}) ${icon(cat.name)} ${cat.name}`;
    lines.push(escapeHtml(title));
    buttons.push({ text: `${idx + 1}`, callback_data: `cat:${cat.categoryId}` });
  });

  const keyboard = [];
  for (let i = 0; i < buttons.length; i += 5) {
    keyboard.push(buttons.slice(i, i + 5));
  }

  return {
    text: lines.join('\n'),
    reply_markup: { inline_keyboard: keyboard },
    parse_mode: 'HTML',
    disable_web_page_preview: true,
  };
}

export function renderUnitsList(units) {
  // units ‚Äî –º–∞—Å—Å–∏–≤ —É–∑–ª–æ–≤ (–ø–æ—Å–ª–µ /units)
  const list = Array.isArray(units) ? units : [];
  const lines = ['<b>–£–∑–ª—ã:</b>'];
  const buttons = [];

  list.forEach((u, idx) => {
    const name = u.name || `–£–∑–µ–ª ${idx + 1}`;
    const unitId = u.unitId || u.id || u.code || String(idx + 1);
    lines.push(`${idx + 1}) ${escapeHtml(name)}`);
    // –ï—Å–ª–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –ø—Ä–æ–≤–∞–ª–∏–≤–∞—Ç—å—Å—è –≤ –¥–µ—Ç–∞–ª–∏, –¥–æ–±–∞–≤—å callback_data: `unit:${unitId}`
    // –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫, –±–µ–∑ –ø–µ—Ä–µ—Ö–æ–¥–∞
    buttons.push({ text: `${idx + 1}`, callback_data: `noop:${unitId}` });
  });

  const keyboard = [];
  for (let i = 0; i < buttons.length; i += 4) {
    keyboard.push(buttons.slice(i, i + 4));
  }

  return {
    text: lines.join('\n'),
    reply_markup: { inline_keyboard: keyboard },
    parse_mode: 'HTML',
    disable_web_page_preview: true,
  };
}

function escapeHtml(s) {
  return String(s).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
}
