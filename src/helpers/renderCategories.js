// src/helpers/renderCategories.js

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Vehicle header (–±–µ–∑ —Ç–µ—Ö.–∏–Ω—Ñ—ã) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */

export function renderVehicleHeader(vehicle = {}) {
  const { brand = '', name = '', attributes = {} } = vehicle || {};
  const A = (k) => attributes?.[k]?.value || '';
  const H = (s) => String(s || '').replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');

  const line = (label, value, emoji = '') => {
    if (!value) return '';
    return `${emoji ? emoji + ' ' : ''}<b>${H(label)}:</b> ${H(value)}\n`;
  };

  const title = (brand || name)
    ? `üöó <b>${H(brand)} ${H(name)}</b>`
    : 'üöó <b>–ê–≤—Ç–æ–º–æ–±–∏–ª—å</b>';

  const info =
    line('–†—ã–Ω–æ–∫', A('market'), 'üåç') +
    line('–ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞', A('prodrange'), 'üìÖ') +
    line('–î–∞—Ç–∞ –≤—ã–ø—É—Å–∫–∞', A('date'), 'üìÜ') +
    line('–í—ã–ø—É—â–µ–Ω–æ', A('manufactured'), 'üè∑Ô∏è') +
    line(
      '–î–≤–∏–≥–∞—Ç–µ–ª—å',
      [A('engine_info') || '', A('engine') ? `(${A('engine')})` : ''].filter(Boolean).join(' '),
      'üõ†Ô∏è'
    ) +
    line('‚Ññ –¥–≤–∏–≥–∞—Ç–µ–ª—è', A('engineno'), 'üî¢') +
    line('–ö–ü–ü', A('transmission'), '‚öôÔ∏è') +
    line('–¶–≤–µ—Ç –∫—É–∑–æ–≤–∞', A('framecolor'), 'üé®') +
    line('–¶–≤–µ—Ç —Å–∞–ª–æ–Ω–∞', A('trimcolor'), 'üßµ');

  return [title, info ? '\n' + info.trim() : ''].filter(Boolean).join('\n').trim();
}

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Categories list (–∫–∞–∫ –ø—Ä–∏—à–ª–∏ –æ—Ç API) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
   –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã:
   1) data: [{ root: [ {id,name,...}, ... ] }]
   2) data: [ {id,name,...}, ... ]
   3) { root: [...] }
   4) [ ... ]
   –ü–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –æ—Ç–≤–µ—Ç–µ.
*/

export function renderCategoriesList(categoriesRoot, page = 0, perPage = 40) {
  const root = extractRoot(categoriesRoot);

  const items = (Array.isArray(root) ? root : [])
    .map((x) => {
      const canonicalId = x?.categoryId ?? x?.CategoryId ?? x?.categoryID ?? null;
      const fallbackId = x?.id ?? x?.code ?? null;
      const resolvedId = canonicalId ?? fallbackId ?? '';

      return {
        id: resolvedId,
        canonicalId,
        name: String(x?.name ?? x?.title ?? '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
      };
    })
    .filter(x => String(x.id).length > 0);

  if (!items.length) {
    return {
      text: 'üóÇÔ∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.',
      parse_mode: 'HTML',
      disable_web_page_preview: true,
    };
  }

  // –ü–∞–≥–∏–Ω–∞—Ü–∏—è (–µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ—á–µ–Ω—å –º–Ω–æ–≥–æ)
  const total = items.length;
  const pages = Math.max(1, Math.ceil(total / perPage));
  const cur   = Math.min(Math.max(0, page), pages - 1);
  const start = cur * perPage;
  const end   = Math.min(total, start + perPage);
  const slice = items.slice(start, end);

  // –ö–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
  const rows = [];
  for (let i = 0; i < slice.length; i += 2) {
    rows.push(
      slice.slice(i, i + 2).map(it => ({
        text: truncate(it.name, 48),
        callback_data: `cat:${it.canonicalId ?? it.id}`,
      }))
    );
  }

  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
  if (pages > 1) {
    const nav = [];
    if (cur > 0) nav.push({ text: '¬´ –ù–∞–∑–∞–¥',   callback_data: `noop:page:${cur - 1}` });
    nav.push({       text: `–°—Ç—Ä. ${cur + 1}/${pages}`, callback_data: 'noop:page:stay' });
    if (cur < pages - 1) nav.push({ text: '–í–ø–µ—Ä—ë–¥ ¬ª', callback_data: `noop:page:${cur + 1}` });
    rows.push(nav);
  }

  return {
    text: 'üóÇÔ∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:',
    parse_mode: 'HTML',
    disable_web_page_preview: true,
    reply_markup: { inline_keyboard: rows },
  };
}

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Units list ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */

export function renderUnitsList(units = []) {
  const buttons = units.map(u => {
    const text = truncate(u?.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è', 48);
    const id   = String(u?.unitId ?? '');
    return { text, callback_data: id ? `unit:${id}` : 'noop:unit' };
  });

  const rows = [];
  for (let i = 0; i < buttons.length; i += 2) {
    rows.push(buttons.slice(i, i + 2));
  }

  return {
    text: 'üîß <b>–£–∑–ª—ã</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —É–∑–µ–ª –¥–ª—è –¥–µ—Ç–∞–ª–µ–π/—Å—Ö–µ–º:',
    parse_mode: 'HTML',
    disable_web_page_preview: true,
    reply_markup: { inline_keyboard: rows.length ? rows : [[{ text: '–ù–∞–∑–∞–¥', callback_data: 'noop:back' }]] },
  };
}

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */

export function extractRoot(categoriesRoot) {
  if (Array.isArray(categoriesRoot?.[0]?.root)) return categoriesRoot[0].root;
  if (Array.isArray(categoriesRoot?.root))      return categoriesRoot.root;
  if (Array.isArray(categoriesRoot))            return categoriesRoot;

  const d = categoriesRoot?.data;
  if (Array.isArray(d?.[0]?.root)) return d[0].root;
  if (Array.isArray(d?.root))      return d.root;
  if (Array.isArray(d))            return d;

  return [];
}

function truncate(s, n) {
  const t = String(s || '');
  return t.length > n ? t.slice(0, n - 1) + '‚Ä¶' : t;
}
