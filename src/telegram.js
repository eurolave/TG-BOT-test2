// src/telegram.js
import TelegramBot from 'node-telegram-bot-api';
import fetch from 'node-fetch';
import {
  renderVehicleHeader,
  renderCategoriesList,
  renderUnitsList
} from './helpers/renderCategories.js';
import {
  saveCategoriesSession,
  getCategoryRecord,
  setUserVehicle,
  getUserVehicle,
  setCategoriesRoot,
  getCategoriesRoot
} from './cache.js';

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ UI: Reply keyboard ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const BTN_VIN   = 'üîé –ü–æ–¥–±–æ—Ä –ø–æ VIN';
const BTN_GPT   = 'ü§ñ GPT-—á–∞—Ç';
const BTN_RESET = '‚ôªÔ∏è –°–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞';

function replyMenu() {
  return {
    resize_keyboard: true,
    keyboard: [
      [{ text: BTN_VIN }, { text: BTN_GPT }],
      [{ text: BTN_RESET }],
    ],
  };
}

export default class Bot {
  constructor(token) {
    this.bot = new TelegramBot(token, { polling: false, webHook: false });
    this.name = 'LaximoBot';

    this._wireHandlers();

    this.bot.on('error', (e) => console.error('[tg:error]', e?.message || e));
    this.bot.on('webhook_error', (e) => console.error('[tg:webhook_error]', e?.message || e));
  }

  async setMenuCommands() {
    await this.bot.setMyCommands([
      { command: 'start', description: '–ù–∞—á–∞–ª–æ' },
      { command: 'vin',   description: '–ü–æ–¥–±–æ—Ä –ø–æ VIN' },
      { command: 'gpt',   description: 'GPT-—á–∞—Ç' },
      { command: 'reset', description: '–°–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ GPT' },
      { command: 'ping',  description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏' },
    ]);
  }

  async startPolling() {
    await this.bot.startPolling({ interval: 800, params: { timeout: 30 } });
  }

  processUpdate(update) {
    this.bot.processUpdate(update);
  }

  _wireHandlers() {
    // /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –º–µ–Ω—é
    this.bot.onText(/^\/start\b/, async (msg) => {
      const chatId = msg.chat.id;
      const text = [
        '<b>–ü—Ä–∏–≤–µ—Ç!</b> –Ø –ø–æ–º–æ–≥—É —Å –ø–æ–¥–±–æ—Ä–æ–º –¥–µ—Ç–∞–ª–µ–π –ø–æ VIN –∏ –ø–æ–¥—Å–∫–∞–∂—É –ø–æ —É–∑–ª–∞–º –∫–∞—Ç–∞–ª–æ–≥–∞.',
        '',
        '–ß—Ç–æ —É–º–µ—é:',
        '‚Ä¢ –ü–æ–¥–±–æ—Ä –ø–æ VIN ‚Äî <code>/vin WAUZZZ... [locale]</code> –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ',
        '‚Ä¢ GPT-—á–∞—Ç ‚Äî <code>/gpt &lt;–≤–æ–ø—Ä–æ—Å&gt;</code> –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ',
        '‚Ä¢ –°–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ GPT ‚Äî <code>/reset</code> –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ',
        '',
        '–ü–æ–¥—Å–∫–∞–∑–∫–∞: –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—Å–ª–∞—Ç—å VIN ‚Äî —è —Å–∞–º –ø–æ–π–º—É üòâ'
      ].join('\n');
      await this._safeSendMessage(chatId, text, { parse_mode: 'HTML', reply_markup: replyMenu() });
    });

    // /ping
    this.bot.onText(/^\/ping\b/i, async (msg) => {
      await this._safeSendMessage(msg.chat.id, 'pong', { reply_markup: replyMenu() });
    });

    // /vin WAUZZZ... [locale]
    this.bot.onText(/^\/vin\s+([A-Za-z0-9]{5,})\s*([A-Za-z_]{2,5}_[A-Za-z]{2})?/i, async (msg, m) => {
      const chatId = msg.chat.id;
      const vin = (m[1] || '').trim();
      const locale = (m[2] || process.env.DEFAULT_LOCALE || 'ru_RU').trim();
      await this._handleVin(chatId, msg.from.id, vin, locale);
    });

    // ReplyKeyboard –∫–Ω–æ–ø–∫–∏ –∏ –ø—Ä–æ—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    this.bot.on('message', async (msg) => {
      if (!msg.text) return;
      const chatId = msg.chat.id;
      const t = msg.text.trim();

      // –ö–æ–º–∞–Ω–¥—ã ‚Äî –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º
      if (/^\/(start|vin|gpt|reset|ping)\b/i.test(t)) return;

      if (t === BTN_VIN) {
        const hint = [
          '<b>–ü–æ–¥–±–æ—Ä –ø–æ VIN</b>',
          '–ü—Ä–∏—à–ª–∏—Ç–µ VIN –∫–∞–∫ –µ—Å—Ç—å (—è –ø–æ–π–º—É) –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:',
          '<code>/vin WAUZZZ4M6JD010702</code>',
          '',
          '–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ª–æ–∫–∞–ª—å:',
          '<code>/vin WAUZZZ4M6JD010702 ru_RU</code>'
        ].join('\n');
        await this._safeSendMessage(chatId, hint, { parse_mode: 'HTML', reply_markup: replyMenu() });
        return;
      }

      if (t === BTN_GPT) {
        const hint = [
          '<b>GPT-—á–∞—Ç</b>',
          '–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∫–æ–º–∞–Ω–¥–æ–π:',
          '<code>/gpt –ö–∞–∫–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¢–û —É Audi Q7?</code>'
        ].join('\n');
        await this._safeSendMessage(chatId, hint, { parse_mode: 'HTML', reply_markup: replyMenu() });
        return;
      }

      if (t === BTN_RESET) {
        const hint = '–ß—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç GPT, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: <code>/reset</code>';
        await this._safeSendMessage(chatId, hint, { parse_mode: 'HTML', reply_markup: replyMenu() });
        return;
      }

      // –ü—Ä–æ—Å—Ç–æ VIN –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã
      if (/^[A-Za-z0-9]{10,}$/.test(t)) {
        const locale = process.env.DEFAULT_LOCALE || 'ru_RU';
        await this._handleVin(chatId, msg.from.id, t, locale);
        return;
      }

      // –û—Å—Ç–∞–ª—å–Ω–æ–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç
    });

    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ callback_query ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    this.bot.on('callback_query', async (q) => {
      const data = q.data || '';

      // 1) –ù–∞–∂–∞–ª–∏ ¬´–ö–∞—Ç–µ–≥–æ—Ä–∏–∏¬ª ‚Äî –≥—Ä—É–∑–∏–º —Å API –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
      if (data === 'cats') {
        await this._handleLoadCategories(q);
        return;
      }

      // 1.1) –ù–∞–∂–∞–ª–∏ ¬´–û–±–Ω–æ–≤–∏—Ç—å¬ª ‚Äî —Ä–∏—Å—É–µ–º –∏–∑ –∫—ç—à–∞, –±–µ–∑ –ø–æ—Ö–æ–¥–∞ –≤ API
      if (data === 'cats_cache') {
        await this.bot.answerCallbackQuery(q.id).catch(() => {});
        const chatId = q.message?.chat?.id;
        const userId = q.from?.id;
        if (!chatId || !userId) return;

        const ctx = await getUserVehicle(userId);
        const catsRoot = ctx ? await getCategoriesRoot(userId, ctx.catalog, ctx.vehicleId || '0') : null;
        if (!catsRoot) {
          await this._safeSendMessage(chatId, '–ö—ç—à –ø—É—Å—Ç. –ù–∞–∂–º–∏—Ç–µ ¬´–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å¬ª.');
          return;
        }

        const msg = renderCategoriesList(catsRoot, 0);
        await this.bot.editMessageText(msg.text, {
          chat_id: chatId,
          message_id: q.message.message_id,
          parse_mode: msg.parse_mode,
          reply_markup: addCatsFooter(msg.reply_markup),
          disable_web_page_preview: msg.disable_web_page_preview,
        }).catch(async () => {
          await this._safeSendMessage(chatId, msg.text, {
            parse_mode: msg.parse_mode,
            reply_markup: addCatsFooter(msg.reply_markup),
            disable_web_page_preview: msg.disable_web_page_preview,
          });
        });
        return;
      }

      // 2) –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      if (data.startsWith('cat:')) {
        const categoryId = data.split(':')[1];
        await this._handleCategory(q, categoryId);
        return;
      }

      // 3) –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–∏–∑ –∫—ç—à–∞)
      if (data.startsWith('noop:page:')) {
        await this.bot.answerCallbackQuery(q.id).catch(() => {});
        const chatId = q.message?.chat?.id;
        const userId = q.from?.id;
        if (!chatId || !userId) return;

        const ctx = await getUserVehicle(userId);
        const catsRoot = ctx ? await getCategoriesRoot(userId, ctx.catalog, ctx.vehicleId || '0') : null;
        if (!catsRoot) {
          await this._safeSendMessage(chatId, '–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å—Ç–∞—Ä–µ–ª. –ù–∞–∂–º–∏—Ç–µ ¬´–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å¬ª.');
          return;
        }

        const pageStr = data.split(':')[2] || '0';
        const page = Number(pageStr) || 0;
        const msg = renderCategoriesList(catsRoot, page);

        await this.bot.editMessageText(msg.text, {
          chat_id: chatId,
          message_id: q.message.message_id,
          parse_mode: msg.parse_mode,
          reply_markup: addCatsFooter(msg.reply_markup),
          disable_web_page_preview: msg.disable_web_page_preview,
        }).catch(async () => {
          await this._safeSendMessage(chatId, msg.text, {
            parse_mode: msg.parse_mode,
            reply_markup: addCatsFooter(msg.reply_markup),
            disable_web_page_preview: msg.disable_web_page_preview,
          });
        });
        return;
      }

      // 4) –ü—Ä–æ—á–∏–µ noop
      if (data.startsWith('noop:')) {
        await this.bot.answerCallbackQuery(q.id).catch(() => {});
      }
    });
  }

  /** –®–∞–≥ 1: VIN ‚Üí –∫–∞—Ä—Ç–æ—á–∫–∞ –∞–≤—Ç–æ + –∫–Ω–æ–ø–∫–∞ ¬´–ö–∞—Ç–µ–≥–æ—Ä–∏–∏¬ª */
  async _handleVin(chatId, userId, vin, locale) {
    const base = (process.env.LAXIMO_BASE_URL || '').replace(/\/+$/, '');
    if (!base) {
      await this._safeSendMessage(chatId, '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω LAXIMO_BASE_URL', { parse_mode: 'HTML', reply_markup: replyMenu() });
      return;
    }

    const url = new URL(base + '/vin');
    url.searchParams.set('vin', vin);
    url.searchParams.set('locale', locale);

    try {
      await this.bot.sendChatAction(chatId, 'typing').catch(() => {});
      const r = await fetch(url.toString());
      const j = await r.json().catch(() => ({}));
      if (!j?.ok) throw new Error(j?.error || 'VIN –Ω–µ –Ω–∞–π–¥–µ–Ω');

      const vehicle = j.data?.[0]?.vehicles?.[0];
      if (!vehicle) throw new Error('–í –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª—è');

      // –®–∞–ø–∫–∞ (–±–µ–∑ —Ç–µ—Ö.–ø–æ–ª–µ–π) ‚Äî —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ renderVehicleHeader
      const header = renderVehicleHeader(vehicle);
      await this._safeSendMessage(chatId, header, { parse_mode: 'HTML', reply_markup: replyMenu() });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç (catalog, vehicleId, rootSsd)
      const catalog = vehicle.catalog;
      const vehicleId = vehicle.vehicleId || '0';
      const rootSsd = vehicle.ssd;
      await setUserVehicle(userId, { catalog, vehicleId, rootSsd });

      
      
      // –ö–Ω–æ–ø–∫–∞ ¬´–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥¬ª (—Å–æ–æ–±—â–µ–Ω–∏–µ —Å NBSP, —á—Ç–æ–±—ã Telegram –Ω–µ —Å—á—ë–ª –ø—É—Å—Ç—ã–º)
await this._safeSendMessage(chatId, '.', {
        pparse_mode: 'HTML',
        disable_web_page_preview: true,
        reply_markup: {
          inline_keyboard: [[{ text: 'üìÇ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥', callback_data: 'cats' }]]
        }
      });

    } catch (e) {
      await this._safeSendMessage(
        chatId,
        `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ VIN: <code>${escapeHtml(String(e?.message || e))}</code>`,
        { parse_mode: 'HTML', reply_markup: replyMenu() }
      );
    }
  }

  /** –®–∞–≥ 2: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –∫–Ω–æ–ø–∫–µ (API ‚Üí –∫—ç—à ‚Üí –≤—ã–≤–æ–¥) */
  async _handleLoadCategories(q) {
    const chatId = q.message?.chat?.id;
    const userId = q.from?.id;
    if (!chatId || !userId) {
      await this.bot.answerCallbackQuery(q.id).catch(() => {});
      return;
    }

    try {
      await this.bot.answerCallbackQuery(q.id, { text: '–ó–∞–≥—Ä—É–∂–∞—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏‚Ä¶' }).catch(() => {});
      const ctx = await getUserVehicle(userId);
      if (!ctx?.catalog || !ctx?.rootSsd) throw new Error('–ö–æ–Ω—Ç–µ–∫—Å—Ç VIN —É—Å—Ç–∞—Ä–µ–ª. –ü–æ–≤—Ç–æ—Ä–∏ VIN.');

      const { catalog, vehicleId, rootSsd } = ctx;
      const base = (process.env.LAXIMO_BASE_URL || '').replace(/\/+$/, '');

      const cUrl = new URL(base + '/categories');
      cUrl.searchParams.set('catalog', catalog);
      cUrl.searchParams.set('vehicleId', vehicleId || '0');
      cUrl.searchParams.set('ssd', rootSsd);

      const cRes = await fetch(cUrl.toString());
      const cJson = await cRes.json().catch(() => ({}));
      if (!cJson?.ok) throw new Error(cJson?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');

      const categoriesRoot = cJson.data;
      const root = extractRoot(categoriesRoot); // –º–∞—Å—Å–∏–≤ –∫–æ—Ä–Ω—è –≤ ¬´–∫–∞–∫ –ø—Ä–∏—à–ª–æ¬ª

      // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ id‚Üíssd (–¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —É–∑–ª—ã)
      await saveCategoriesSession(userId, catalog, vehicleId || '0', root);

      // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ü–û–õ–ù–£–Æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π, —á—Ç–æ–±—ã —Ä–∏—Å–æ–≤–∞—Ç—å ¬´–û–±–Ω–æ–≤–∏—Ç—å¬ª –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∏–∑ –∫—ç—à–∞
      await setCategoriesRoot(userId, catalog, vehicleId || '0', categoriesRoot);

      // —Ä–µ–Ω–¥–µ—Ä (–∫–∞–∫ –ø—Ä–∏—à–ª–æ) + –∫–Ω–æ–ø–∫–∏ ¬´–û–±–Ω–æ–≤–∏—Ç—å/–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å¬ª
      const msg = renderCategoriesList(categoriesRoot);
      await this._safeSendMessage(chatId, msg.text, {
        parse_mode: msg.parse_mode,
        reply_markup: addCatsFooter(msg.reply_markup),
        disable_web_page_preview: msg.disable_web_page_preview,
      });
    } catch (e) {
      await this._safeSendMessage(
        chatId,
        `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: <code>${escapeHtml(String(e?.message || e))}</code>`,
        { parse_mode: 'HTML', reply_markup: replyMenu() }
      );
    }
  }

  /** –®–∞–≥ 3: –£–∑–ª—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */
  async _handleCategory(q, categoryId) {
    const chatId = q.message?.chat?.id;
    const userId = q.from?.id;
    if (!chatId || !userId) {
      await this.bot.answerCallbackQuery(q.id).catch(() => {});
      return;
    }

    try {
      await this.bot.answerCallbackQuery(q.id, { text: '–ó–∞–≥—Ä—É–∂–∞—é —É–∑–ª—ã‚Ä¶' }).catch(() => {});

      const ctx = await getUserVehicle(userId);
      if (!ctx?.catalog) throw new Error('–ö–æ–Ω—Ç–µ–∫—Å—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏ VIN.');
      const { catalog, vehicleId } = ctx;

      const category = await getCategoryRecord(userId, catalog, vehicleId || '0', categoryId);
      const ssd = category?.ssd;
      const canonicalCategoryId = category?.categoryId ?? categoryId;

      if (!ssd) throw new Error('–°–µ—Å—Å–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–≤—Ç–æ—Ä–∏ VIN.');

      const base = (process.env.LAXIMO_BASE_URL || '').replace(/\/+$/, '');
      const uUrl = new URL(base + '/units');
      uUrl.searchParams.set('catalog', catalog);
      uUrl.searchParams.set('vehicleId', vehicleId || '0');
      uUrl.searchParams.set('ssd', ssd);
      uUrl.searchParams.set('categoryId', String(canonicalCategoryId));

      const uRes = await fetch(uUrl.toString());
      const uJson = await uRes.json().catch(() => ({}));
      if (!uJson?.ok) throw new Error(uJson?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É–∑–ª—ã');

      const data0 = Array.isArray(uJson.data) ? uJson.data[0] : (uJson.data || {});
      const units = data0.units || data0?.saaUnits || data0?.unit || [];

      const msg = renderUnitsList(units);
      await this._safeSendMessage(chatId, msg.text, {
        parse_mode: msg.parse_mode,
        reply_markup: msg.reply_markup,
        disable_web_page_preview: msg.disable_web_page_preview,
      });
    } catch (e) {
      await this._safeSendMessage(
        chatId,
        `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É–∑–ª—ã: <code>${escapeHtml(String(e?.message || e))}</code>`,
        { parse_mode: 'HTML', reply_markup: replyMenu() }
      );
    }
  }

  async _safeSendMessage(chatId, text, opts = undefined) {
    try {
      await this.bot.sendMessage(chatId, text, opts);
    } catch (e) {
      const resp = e?.response;
      if (resp?.statusCode || resp?.body) {
        console.error('[sendMessage error]', resp.statusCode, resp.body || resp);
      } else {
        console.error('[sendMessage error]', e?.message || e);
      }
    }
  }
}

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

/** –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω–µ—Ü –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–Ω–æ–ø–∫–∏ ¬´–û–±–Ω–æ–≤–∏—Ç—å/–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å¬ª */
function addCatsFooter(reply_markup) {
  const rm = reply_markup || {};
  const kb = Array.isArray(rm.inline_keyboard) ? rm.inline_keyboard.slice() : [];
  kb.push([
    { text: 'üîÅ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'cats_cache' },
    { text: 'üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å', callback_data: 'cats' },
  ]);
  return { inline_keyboard: kb };
}

function extractRoot(categoriesRoot) {
  // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:
  // 1) [{ root: [...] }]
  // 2) { root: [...] }
  // 3) [ ... ]
  // 4) { data: ... } ‚Äî –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
  if (Array.isArray(categoriesRoot?.[0]?.root)) return categoriesRoot[0].root;
  if (Array.isArray(categoriesRoot?.root)) return categoriesRoot.root;
  if (Array.isArray(categoriesRoot)) return categoriesRoot;

  const d = categoriesRoot?.data;
  if (Array.isArray(d?.[0]?.root)) return d[0].root;
  if (Array.isArray(d?.root)) return d.root;
  if (Array.isArray(d)) return d;

  return [];
}

function escapeHtml(s) {
  return String(s)
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;');
}
